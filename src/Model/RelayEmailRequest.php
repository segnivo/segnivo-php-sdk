<?php
/**
 * RelayEmailRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Segnivo\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Segnivo Developer API
 *
 * **API Version**: 1.7  **Date**: 9th July, 2024  ## ðŸ“„ Getting Started  This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.  Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.  The API must not be abused and should be used within acceptable limits.  To start using this API, you will need not create or access an existing Segnivo account to obtain your API key ([retrievable from your account settings](https://messaging.segnivo.com/account/api)).  - You must use a valid API Key to send requests to the API endpoints.      - The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP 301 redirect to the corresponding HTTPS resources.      - The API returns request responses in JSON format. When an API request returns an error, it is sent in the JSON response as an error key or with details in the message key.       ### ðŸ”– **Need some help?**  In case you have questions or need clarity with interacting with some endpoints feel free to create a support ticket on your account or you can send an email ([<i>developers@segnivo.com</i>](https://mailto:developers@segnivo.com)) directly and we would be happy to help.  ---  ## Authentication  As noted earlier, this API uses API keys for authentication. You can generate a Segnivo API key in the [API](https://messaging.segnivo.com/account/api) section of your account settings.  You must include an API key in each request to this API with the `X-API-KEY` request header.  ### Authentication error response  If an API key is missing, malformed, or invalid, you will receive an HTTP 401 Unauthorized response code.  ## Rate and usage limits  API access rate limits apply on a per-API endpoint basis in unit time. The limit is 10k requests per hour for most endpoints and 1m requests per hour for transactional/relay email-sending endpoints. Also, depending on your plan, you may have usage limits. If you exceed either limit, your request will return an HTTP 429 Too Many Requests status code or HTTP 403 if sending credits have been exhausted.  ### 503 response  An HTTP `503` response from our servers may indicate there is an unexpected spike in API access traffic, while this rarely happens, we ensure the server is usually operational within the next two to five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, contact support ([<i>developers@segnivo.com</i>](https://mailto:developers@segnivo.com)).  ### Request headers  To make a successful request, some or all of the following headers must be passed with the request.  | **Header** | **Description** | | --- | --- | | Content-Type | Required and should be `application/json` in most cases. | | Accept | Required and should be `application/json` in most cases | | Content-Length | Required for `POST`, `PATCH`, and `PUT` requests containing a request body. The value must be the number of bytes rather than the number of characters in the request body. | | X-API-KEY | Required. Specifies the API key used for authorization. |  ##### ðŸ”– Note with example requests and code snippets  If/when you use the code snippets used as example requests, remember to calculate and add the `Content-Length` header. Some request libraries, frameworks, and tools automatically add this header for you while a few do not. Kindly check and ensure yours does or add it yourself.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Segnivo\SDK\Model;

use \ArrayAccess;
use \Segnivo\SDK\ObjectSerializer;

/**
 * RelayEmailRequest Class Doc Comment
 *
 * @category Class
 * @package  Segnivo\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RelayEmailRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RelayEmailRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subject' => 'string',
        'fromName' => 'string',
        'fromEmail' => 'string',
        'replyTo' => 'string',
        'contentType' => 'string',
        'recipients' => 'string[]',
        'content' => 'string',
        'preheader' => 'string',
        'customHeaders' => 'object',
        'deliveryAt' => 'int',
        'attachments' => 'string[]',
        'signDkim' => 'bool',
        'trackClick' => 'bool',
        'trackOpen' => 'bool',
        'isTransactional' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subject' => null,
        'fromName' => null,
        'fromEmail' => null,
        'replyTo' => null,
        'contentType' => null,
        'recipients' => null,
        'content' => null,
        'preheader' => null,
        'customHeaders' => null,
        'deliveryAt' => null,
        'attachments' => null,
        'signDkim' => null,
        'trackClick' => null,
        'trackOpen' => null,
        'isTransactional' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subject' => false,
        'fromName' => false,
        'fromEmail' => false,
        'replyTo' => false,
        'contentType' => false,
        'recipients' => false,
        'content' => false,
        'preheader' => false,
        'customHeaders' => false,
        'deliveryAt' => false,
        'attachments' => false,
        'signDkim' => false,
        'trackClick' => false,
        'trackOpen' => false,
        'isTransactional' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subject' => 'subject',
        'fromName' => 'from_name',
        'fromEmail' => 'from_email',
        'replyTo' => 'reply_to',
        'contentType' => 'content_type',
        'recipients' => 'recipients',
        'content' => 'content',
        'preheader' => 'preheader',
        'customHeaders' => 'custom_headers',
        'deliveryAt' => 'delivery_at',
        'attachments' => 'attachments',
        'signDkim' => 'sign_dkim',
        'trackClick' => 'track_click',
        'trackOpen' => 'track_open',
        'isTransactional' => 'is_transactional'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subject' => 'setSubject',
        'fromName' => 'setFromName',
        'fromEmail' => 'setFromEmail',
        'replyTo' => 'setReplyTo',
        'contentType' => 'setContentType',
        'recipients' => 'setRecipients',
        'content' => 'setContent',
        'preheader' => 'setPreheader',
        'customHeaders' => 'setCustomHeaders',
        'deliveryAt' => 'setDeliveryAt',
        'attachments' => 'setAttachments',
        'signDkim' => 'setSignDkim',
        'trackClick' => 'setTrackClick',
        'trackOpen' => 'setTrackOpen',
        'isTransactional' => 'setIsTransactional'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subject' => 'getSubject',
        'fromName' => 'getFromName',
        'fromEmail' => 'getFromEmail',
        'replyTo' => 'getReplyTo',
        'contentType' => 'getContentType',
        'recipients' => 'getRecipients',
        'content' => 'getContent',
        'preheader' => 'getPreheader',
        'customHeaders' => 'getCustomHeaders',
        'deliveryAt' => 'getDeliveryAt',
        'attachments' => 'getAttachments',
        'signDkim' => 'getSignDkim',
        'trackClick' => 'getTrackClick',
        'trackOpen' => 'getTrackOpen',
        'isTransactional' => 'getIsTransactional'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONTENT_TYPE_TEXT = 'text';
    public const CONTENT_TYPE_HTML = 'html';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentTypeAllowableValues()
    {
        return [
            self::CONTENT_TYPE_TEXT,
            self::CONTENT_TYPE_HTML,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('fromName', $data ?? [], null);
        $this->setIfExists('fromEmail', $data ?? [], null);
        $this->setIfExists('replyTo', $data ?? [], null);
        $this->setIfExists('contentType', $data ?? [], 'html');
        $this->setIfExists('recipients', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('preheader', $data ?? [], null);
        $this->setIfExists('customHeaders', $data ?? [], null);
        $this->setIfExists('deliveryAt', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('signDkim', $data ?? [], true);
        $this->setIfExists('trackClick', $data ?? [], true);
        $this->setIfExists('trackOpen', $data ?? [], true);
        $this->setIfExists('isTransactional', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getContentTypeAllowableValues();
        if (!is_null($this->container['contentType']) && !in_array($this->container['contentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'contentType', must be one of '%s'",
                $this->container['contentType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['recipients']) && (count($this->container['recipients']) > 50)) {
            $invalidProperties[] = "invalid value for 'recipients', number of items must be less than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject The subject of the email
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets fromName
     *
     * @return string|null
     */
    public function getFromName()
    {
        return $this->container['fromName'];
    }

    /**
     * Sets fromName
     *
     * @param string|null $fromName The full name of the sender
     *
     * @return self
     */
    public function setFromName($fromName)
    {
        if (is_null($fromName)) {
            throw new \InvalidArgumentException('non-nullable fromName cannot be null');
        }
        $this->container['fromName'] = $fromName;

        return $this;
    }

    /**
     * Gets fromEmail
     *
     * @return string|null
     */
    public function getFromEmail()
    {
        return $this->container['fromEmail'];
    }

    /**
     * Sets fromEmail
     *
     * @param string|null $fromEmail The email of the sender
     *
     * @return self
     */
    public function setFromEmail($fromEmail)
    {
        if (is_null($fromEmail)) {
            throw new \InvalidArgumentException('non-nullable fromEmail cannot be null');
        }
        $this->container['fromEmail'] = $fromEmail;

        return $this;
    }

    /**
     * Gets replyTo
     *
     * @return string|null
     */
    public function getReplyTo()
    {
        return $this->container['replyTo'];
    }

    /**
     * Sets replyTo
     *
     * @param string|null $replyTo The email to which replies should be sent
     *
     * @return self
     */
    public function setReplyTo($replyTo)
    {
        if (is_null($replyTo)) {
            throw new \InvalidArgumentException('non-nullable replyTo cannot be null');
        }
        $this->container['replyTo'] = $replyTo;

        return $this;
    }

    /**
     * Gets contentType
     *
     * @return string|null
     */
    public function getContentType()
    {
        return $this->container['contentType'];
    }

    /**
     * Sets contentType
     *
     * @param string|null $contentType The content type of the email body
     *
     * @return self
     */
    public function setContentType($contentType)
    {
        if (is_null($contentType)) {
            throw new \InvalidArgumentException('non-nullable contentType cannot be null');
        }
        $allowedValues = $this->getContentTypeAllowableValues();
        if (!in_array($contentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'contentType', must be one of '%s'",
                    $contentType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contentType'] = $contentType;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return string[]|null
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param string[]|null $recipients An array of email addresses to deliver this message
     *
     * @return self
     */
    public function setRecipients($recipients)
    {
        if (is_null($recipients)) {
            throw new \InvalidArgumentException('non-nullable recipients cannot be null');
        }

        if ((count($recipients) > 50)) {
            throw new \InvalidArgumentException('invalid value for $recipients when calling RelayEmailRequest., number of items must be less than or equal to 50.');
        }
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content The HTML or plain text content of the email
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets preheader
     *
     * @return string|null
     */
    public function getPreheader()
    {
        return $this->container['preheader'];
    }

    /**
     * Sets preheader
     *
     * @param string|null $preheader The email preheader
     *
     * @return self
     */
    public function setPreheader($preheader)
    {
        if (is_null($preheader)) {
            throw new \InvalidArgumentException('non-nullable preheader cannot be null');
        }
        $this->container['preheader'] = $preheader;

        return $this;
    }

    /**
     * Gets customHeaders
     *
     * @return object|null
     */
    public function getCustomHeaders()
    {
        return $this->container['customHeaders'];
    }

    /**
     * Sets customHeaders
     *
     * @param object|null $customHeaders An object of custom headers to add to the email
     *
     * @return self
     */
    public function setCustomHeaders($customHeaders)
    {
        if (is_null($customHeaders)) {
            throw new \InvalidArgumentException('non-nullable customHeaders cannot be null');
        }
        $this->container['customHeaders'] = $customHeaders;

        return $this;
    }

    /**
     * Gets deliveryAt
     *
     * @return int|null
     */
    public function getDeliveryAt()
    {
        return $this->container['deliveryAt'];
    }

    /**
     * Sets deliveryAt
     *
     * @param int|null $deliveryAt The 10-digit unix timestamp of the date/time at which this email should be delivered
     *
     * @return self
     */
    public function setDeliveryAt($deliveryAt)
    {
        if (is_null($deliveryAt)) {
            throw new \InvalidArgumentException('non-nullable deliveryAt cannot be null');
        }
        $this->container['deliveryAt'] = $deliveryAt;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return string[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param string[]|null $attachments An array of URLs of files to attach to the email
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets signDkim
     *
     * @return bool|null
     */
    public function getSignDkim()
    {
        return $this->container['signDkim'];
    }

    /**
     * Sets signDkim
     *
     * @param bool|null $signDkim A boolean value on if a DKIM signature should be included in this message
     *
     * @return self
     */
    public function setSignDkim($signDkim)
    {
        if (is_null($signDkim)) {
            throw new \InvalidArgumentException('non-nullable signDkim cannot be null');
        }
        $this->container['signDkim'] = $signDkim;

        return $this;
    }

    /**
     * Gets trackClick
     *
     * @return bool|null
     */
    public function getTrackClick()
    {
        return $this->container['trackClick'];
    }

    /**
     * Sets trackClick
     *
     * @param bool|null $trackClick A boolean value on if email clicks should be tracked
     *
     * @return self
     */
    public function setTrackClick($trackClick)
    {
        if (is_null($trackClick)) {
            throw new \InvalidArgumentException('non-nullable trackClick cannot be null');
        }
        $this->container['trackClick'] = $trackClick;

        return $this;
    }

    /**
     * Gets trackOpen
     *
     * @return bool|null
     */
    public function getTrackOpen()
    {
        return $this->container['trackOpen'];
    }

    /**
     * Sets trackOpen
     *
     * @param bool|null $trackOpen A boolean value on if the email opens should be tracked
     *
     * @return self
     */
    public function setTrackOpen($trackOpen)
    {
        if (is_null($trackOpen)) {
            throw new \InvalidArgumentException('non-nullable trackOpen cannot be null');
        }
        $this->container['trackOpen'] = $trackOpen;

        return $this;
    }

    /**
     * Gets isTransactional
     *
     * @return bool|null
     */
    public function getIsTransactional()
    {
        return $this->container['isTransactional'];
    }

    /**
     * Sets isTransactional
     *
     * @param bool|null $isTransactional A boolean value to flag this email as a transactional email
     *
     * @return self
     */
    public function setIsTransactional($isTransactional)
    {
        if (is_null($isTransactional)) {
            throw new \InvalidArgumentException('non-nullable isTransactional cannot be null');
        }
        $this->container['isTransactional'] = $isTransactional;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


